from kedro.pipeline import Pipeline, node, pipeline
from .nodes import (
    scale_numerical_columns,
    train_test_split_function,
    feature_selection,
    results,
    logistic_regression_node,
    decision_tree_classifier_node,
    random_forest_classifier_node,
    xgboost_classifier_node,
    neural_network_classifier_node,
    catboost_classifier_node,
    apply_sampling_smote_rus,
    stacked_classifier,
)


def create_pipeline(**kwargs) -> Pipeline:
    return pipeline(
        [
            node(
                func=scale_numerical_columns,
                inputs=["preprocessed_log_dataset"],
                outputs="preprocessed_scale_dataset",
                name="scale_node",
            ),
            node(
                func=train_test_split_function,
                inputs=[
                    "preprocessed_scale_dataset",
                    "params:train_test_split.target_col",
                    "params:train_test_split.test_size",
                    "params:train_test_split.random_state",
                ],
                outputs=["X_train", "X_test", "y_train", "y_test"],
                name="train_test_split_node",
            ),
            node(
                func=feature_selection,
                inputs=[
                    "X_train",
                    "y_train",
                    "X_test",
                    "params:feature_selection.solver",
                    "params:feature_selection.class_weight",
                    "params:feature_selection.max_iter",
                    "params:feature_selection.direction",
                    "params:feature_selection.scoring",
                    "params:feature_selection.cv",
                    "params:feature_selection.n_jobs",
                ],
                outputs=["X_train_after_selection", "X_test_after_selection"],
                name="feature_selection_node",
            ),
            node(
                func=apply_sampling_smote_rus,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "params:apply_sampling.rus_params",
                    "params:apply_sampling.smote_params",
                ],
                outputs=[
                    "X_train_rus",
                    "y_train_rus",
                    "X_train_smote",
                    "y_train_smote",
                ],
                name="apply_sampling_smote_rus_node",
            ),
            node(
                func=logistic_regression_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "X_train_rus",
                    "y_train_rus",
                    "X_train_smote",
                    "y_train_smote",
                    "params:logistic_regression",
                ],
                outputs=[
                    "logistic_model",
                    "logistic_model_rus",
                    "logistic_model_smote",
                ],
                name="logistic_regression_node",
            ),
            node(
                func=decision_tree_classifier_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "X_train_rus",
                    "y_train_rus",
                    "X_train_smote",
                    "y_train_smote",
                    "params:decision_tree_classifier",
                ],
                outputs=[
                    "decision_tree_model",
                    "decision_tree_model_rus",
                    "decision_tree_model_smote",
                ],
                name="decision_tree_node",
            ),
            node(
                func=random_forest_classifier_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "params:random_forest_classifier",
                ],
                outputs="random_forest_model",
                name="random_forest_node",
            ),
            node(
                func=xgboost_classifier_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "params:xgboost_classifier",
                ],
                outputs="xgboost_model",
                name="xgboost_node",
            ),
            node(
                func=neural_network_classifier_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "X_train_rus",
                    "y_train_rus",
                    "X_train_smote",
                    "y_train_smote",
                    "params:neural_network_classifier",
                ],
                outputs=[
                    "neural_network_model",
                    "neural_network_model_rus",
                    "neural_network_model_smote",
                ],
                name="neural_network_node",
            ),
            node(
                func=catboost_classifier_node,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                    "params:catboost_classifier",
                ],
                outputs="catboost_model",
                name="catboost_node",
            ),
            node(
                func=stacked_classifier,
                inputs=[
                    "X_train_after_selection",
                    "y_train",
                ],
                outputs="stacked_model",
                name="stacked_classifier_node",
            ),
            node(
                func=results,
                inputs=[
                    "stacked_model",
                    "catboost_model",
                    "neural_network_model_rus",
                    "xgboost_model",
                    "random_forest_model",
                    "decision_tree_model",
                    "logistic_model",
                    "X_train_after_selection",
                    "y_train",
                    "X_test_after_selection",
                    "y_test",
                ],
                outputs="results_df",
                name="results_node",
            ),
        ]
    )
