    
train_test_split:
  target_col: 'BAD'
  test_size: 0.2
  random_state: 42

apply_sampling:
  rus_params:
    sampling_strategy: "auto"
    random_state: 42
  smote_params:
    sampling_strategy: 0.8
    random_state: 42
    k_neighbors: 5

feature_selection:
  solver: "liblinear"
  class_weight: "balanced"
  max_iter: 10000
  direction: "forward"
  scoring: "roc_auc"
  cv: 5
  n_jobs: -1

logistic_regression:
  param_grid:
    penalty: ['l1', 'l2']
    C: [0.01, 0.1, 1, 10]
    solver: ['liblinear']
    class_weight: [null, 'balanced']
  scoring: "recall"
  cv: 10
  max_iter: 10000
  random_state: 42
  verbose: 0
  n_jobs: -1

decision_tree_classifier:
  param_grid:
    max_depth: [3, 5, 10, null]
    min_samples_split: [2, 5, 10]
    min_samples_leaf: [1, 3, 5]
    max_features: [null, 'sqrt', 'log2']
    criterion: ['gini', 'entropy']
    class_weight: [null, 'balanced']
  scoring: "recall"
  cv: 10
  random_state: 42
  verbose: 0
  n_jobs: -1

random_forest_classifier:
  param_grid:
    n_estimators: [100, 200, 1500]
    max_depth: [null, 10, 20]
    min_samples_split: [2, 5, 10]
    min_samples_leaf: [1, 3, 5]
    max_features: ['sqrt', 'log2']
    class_weight: [null, 'balanced']
  scoring: "recall"
  cv: 10
  random_state: 42
  verbose: 0
  n_jobs: -1

xgboost_classifier:
  param_grid:
    n_estimators: [100, 200, 1500]
    max_depth: [4, 6, 8]
    scale_pos_weight: [1, 4.16, 10]
    min_child_weight: [3, 5]
    learning_rate: [0.1, 0.2]
    subsample: [0.8, 1.0]
  scoring: "recall"
  cv: 10
  random_state: 42
  verbose: 0
  n_jobs: -1

neural_network_classifier:
  param_grid:
    hidden_layer_sizes:
      - [64]
      - [64, 32]
      - [128, 64]
      - [128, 64, 32]
    activation: ['relu', 'tanh']
    solver: ['adam', 'sgd']
    alpha: [0.0001, 0.001, 0.01]  # L2 penalty (regularization)
    learning_rate: ['constant', 'adaptive']
  scoring: "recall"  # Choose metric: recall, f1, accuracy, etc.
  cv: 10
  random_state: 42
  verbose: 0
  n_jobs: -1
  max_iter: 1000

catboost_classifier:
  param_grid:
    iterations: [100, 300]
    learning_rate: [0.01, 0.1]
    depth: [4, 6, 8]
    l2_leaf_reg: [1, 3, 5]
    auto_class_weights: [null, 'Balanced']
    bootstrap_type: ['Bayesian', 'Bernoulli']
  scoring: "recall"
  cv: 5
  random_state: 42
  verbose: 0
  n_jobs: -1

